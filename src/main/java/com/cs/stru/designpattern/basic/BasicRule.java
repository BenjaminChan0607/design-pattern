package com.cs.stru.designpattern.basic;

public class BasicRule {
    /**
     * https://blog.csdn.net/zuoxiaolong8810/article/details/8996336
     *
     * 程序设计六大原则
     * 1，单一责任原则：每个类只负责单一的功能；
     *      一个类将一个功能做到极致，否则，维护困难；
     *
     *    比如一个需求需要读取文件并且进行一个操作两个步骤，再来一个需求还是读取文件并进行呢操作，那我们可以将读取文件抽取出来，
     *    只在需求改变操作的时候修改即可。
     * 2，里式替换原则：子类可以替换掉父类并且可以正常工作；
     *      很多时候我们用子类的时候会担心子类替代父类但是完成不了父类的功能；
     *      有时候我们违反里式替换原则反而会得到更好的结果，如模板模式，缺省适配器模式，装饰模式；
     * 3，接口隔离原则：一个接口拥有的行为应该尽可能小；
     *      不满足时的状况，一个类实现一个接口，很多方法都是空的，只有几个实现了；
     * 4，依赖倒置原则：高层模块不应该依赖于低层模块，两者都应该依赖于抽象，抽象不该依赖于细节，而细节应该依赖于抽象
     *      ReaderClass FileReader/XMLReader/NetReader/OutputReader
     *      客户端依赖于一个Reader，不需要知道数据从哪里获取，只需要让你知道a，b两个值即可；
     *      这就是依赖于抽象的好处；
     * 5，迪米特原则（最小知道原则）一个类尽量不要知道其他类太多的东西；简而言之，类的封装性要做好
     *      高类聚：讲一个类的细节全部写在这个类的内部，不要漏出来给其他类知道，否则其他类很容易依赖于这些细节；类之间的耦合度会上升；
     *      会导致一个修改想关联的全部类都要修改；DenpendentReader
     * 6，开-闭原则：对扩展开放，对修改关闭
     *      系统设计的理想状态：任何新的需求不需要修改原有的代码，而只需要加一些新的实现
     *      尽量遵守前五个原则就会比较符合开闭原则了；
     *
     * 大话设计模式：用抽象构建框架，用细节实现扩展；
     * 为什么学习：增加系统的健壮性和可扩展性
     */
}
